template <typename T, typename C = std::deque<T>>
class fuck_stack {
	private:
		C _c;
	public:
		explicit fuck_stack (const C& c = C()) :
			_c (c) {

		}

		fuck_stack(const fuck_stack&) = default;
		fuck_stack& operator = (const fuck_stack&) = default;
		~fuck_stack() = default;

		bool empty () const {
			return _c.empty();
		}

		void pop () {
			_c.pop_back();
		}

		void push(const T& v) {
			_c.push_back(v);
		}

		int size() const {
			return _c.size();
		}

		T& top() {
			return _c.back();
		}

		const T& top() const {
			return _c.back();
		}
		
}


// using a vector
	template <typename T, typename V = fuck_vector>
	class vector_stack {
	private:
		V _v;
	public:
		explicit vector_stack (const fuck_vector& v = fuck_vector()) :
			_v (v) {

		}

		vector_stack(const vector_stack&) = default;
		vector_stack& operator = (const vector_stack&) = default;
		~vector_stack() = default;

		void pop () {
			--_v._e;
			// but the _e is private
		}
}
